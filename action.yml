name: 'Proto Enforce Optional'
description: 'Enforces that newly added protobuf scalar fields have the optional keyword (repeated, map, and oneof fields are skipped)'
author: 'Newbie012'

# GitHub Marketplace metadata
marketplace:
  pricing: 'free'
  categories:
    - 'code-quality'
    - 'testing'

inputs:
  base-ref:
    description: 'Base git reference to compare against'
    required: false
    default: 'origin/main'
  head-ref:
    description: 'Head git reference to compare'
    required: false
    default: 'HEAD'
  working-directory:
    description: 'Working directory where the protobuf files are located'
    required: false
    default: '.'

outputs:
  violations-found:
    description: 'Whether any violations were found (true/false)'
    value: ${{ steps.check.outputs.violations-found }}
  violations-count:
    description: 'Number of violations found'
    value: ${{ steps.check.outputs.violations-count }}

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        check-latest: true

    - name: Run optional field check
      id: check
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Checking protobuf fields from ${{ inputs.base-ref }} to ${{ inputs.head-ref }}..."
        
        # Add some diagnostic information
        echo "📊 Git repository diagnostics:"
        echo "Current directory: $(pwd)"
        echo "Git status: $(git status --porcelain | wc -l) files changed"
        echo "Available branches: $(git branch -a | head -5 | tr '\n' ' ')"
        echo "Checking if base ref exists: ${{ inputs.base-ref }}"
        if git rev-parse --verify "${{ inputs.base-ref }}" >/dev/null 2>&1; then
          echo "✅ Base ref ${{ inputs.base-ref }} exists"
        else
          echo "❌ Base ref ${{ inputs.base-ref }} not found"
          echo "Available remote branches:"
          git branch -r | head -10
        fi
        
        # Check for .proto files
        proto_count=$(find . -name "*.proto" | wc -l)
        echo "Found $proto_count .proto files in repository"
        
        # Build the binary in the action's directory first
        cd "${{ github.action_path }}"
        go build -o proto-enforce-optional .
        
        # Move back to working directory and run the binary
        cd "${{ inputs.working-directory }}"
        
        # Run the check and capture output
        if "${{ github.action_path }}/proto-enforce-optional" "${{ inputs.base-ref }}" "${{ inputs.head-ref }}" > check_output.txt 2>&1; then
          echo "✅ All newly added protobuf fields are properly configured"
          echo "violations-found=false" >> $GITHUB_OUTPUT
          echo "violations-count=0" >> $GITHUB_OUTPUT
          cat check_output.txt
        else
          exit_code=$?
          echo "❌ Found protobuf field violations:"
          cat check_output.txt
          
          # Count violations (each line starting with "❌" is a violation)
          violation_count=$(grep -c "^❌" check_output.txt || echo "0")
          
          echo "violations-found=true" >> $GITHUB_OUTPUT
          echo "violations-count=$violation_count" >> $GITHUB_OUTPUT
          
          # Clean up temp files
          rm -f check_output.txt
          
          exit $exit_code
        fi
        
        # Clean up temp files
        rm -f check_output.txt

branding:
  icon: 'check-circle'
  color: 'green' 